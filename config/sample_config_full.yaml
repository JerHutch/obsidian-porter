# Obsidian Porter â€” Full Sample Configuration
# This sample demonstrates ALL available configuration options, including LLM-based categorization.
# Copy this file to config/my_settings.yaml and tweak as needed.

# -----------------------------
# Phase 2 Feature Toggles
# -----------------------------
enable_editor_pipeline: true
enable_auto_tagging: true
enable_folder_organization: true
enable_content_transformation: true

# -----------------------------
# Phase 3 Feature Toggles
# -----------------------------
# Enable advanced features like note splitting
enable_note_splitting: true

# -----------------------------
# LLM-based Categorization
# -----------------------------
# When enabled, a CategoryClassifier will use an LLM to assign a single category (slug) to each note.
# This category may be propagated to tags and used to drive folder mapping.
# See docs/llm-categorization.md for details.

enable_llm_categorization: false

# Provider to use: openai | anthropic | ollama | vertex | groq
llm_provider: openai

# Model to request (provider-specific). Examples:
# - OpenAI: gpt-4o-mini, gpt-4o, gpt-4.1-mini, etc.
# - Anthropic: claude-3-haiku, claude-3-sonnet, etc.
# - Groq: mixtral-8x7b, llama3-* (check Groq docs)
# - Vertex: see Vertex AI model names
# - Ollama: name of local model served via OpenAI-compatible endpoint
llm_model: gpt-5-mini

# Provider -> Environment Variable name containing the API key.
# Do NOT store secrets in files. Ensure your environment exports these variables before running.
llm_api_keys:
  openai: OPENAI_API_KEY
  anthropic: ANTHROPIC_API_KEY
  groq: GROQ_API_KEY
  vertex: GOOGLE_APPLICATION_CREDENTIALS  # Path to JSON creds or rely on ADC; see provider docs
  ollama: OLLAMA_API_KEY  # Often not required for local Ollama; leave unset if not used

# For OpenAI-compatible services (like a local Ollama gateway), set a custom base URL.
# Example (Ollama-compatible): http://localhost:11434/v1
llm_base_url: null

# Networking and reliability controls
llm_timeout_sec: 30
llm_max_retries: 2
llm_concurrency: 4

# Response caching to avoid repeated LLM calls (JSONL file). .cache/ is git-ignored by default.
llm_cache_enabled: true
llm_cache_path: .cache/llm_category.jsonl

# Classification behavior
llm_min_confidence: 0.6        # 0.0..1.0
llm_head_chars: 2500           # Capture the beginning of the note
llm_tail_chars: 500            # And the end; helps short notes and summaries

# Policy when the model is uncertain (below confidence threshold):
# - other: assign the 'other' category
# - suggest: leave category unset, but attach _category_suggestions with up to suggestions_count entries
undecided_policy: suggest
suggestions_count: 3

# If true, ensure the chosen category slug is present in the note's tags
propagate_category_tag: true

# LLM Prompt Template and Suggestions
# If provided, the classifier will load and render this template with placeholders.
llm_prompt_template_path: null  # e.g., config/prompts/default_classifier_prompt.txt
llm_prompt_version: v1          # Changing this invalidates cache keys
llm_allow_freeform_suggestions: true   # Allow suggestions beyond configured slugs
llm_suggest_tags: true                  # Ask LLM to return tags for the note
llm_tags_max_count: 5                   # Cap on number of LLM tags
llm_tags_min_count: 0                   # Minimum desired (informational)

# Complete set of available categories for the classifier.
# Include a fallback 'other' slug.
categories:
  - name: Cocktails
    slug: cocktails
    description: "Cocktail recipes, mixed drinks, ingredients, techniques."
  - name: Recipes
    slug: recipes
    description: "Food recipes, ingredients, cooking instructions."
  - name: Gaming
    slug: gaming
    description: "Video games, gameplay notes, walkthroughs, strategies."
  - name: Music
    slug: music
    description: "Music notes, artists, songs, albums, playlists."
  - name: Track lists
    slug: track-lists
    description: "Tracklists, DJ sets, setlists, ordered lists of tracks."
  - name: House
    slug: house
    description: "Home ownership and maintenance: projects, repairs, appliances, upkeep."
  - name: Role-playing games
    slug: role-playing-games
    description: "Tabletop RPGs, characters, campaigns, rules."
  - name: Movies
    slug: movies
    description: "Lists of movies, titles of movies"
  - name: Anime
    slug: anime
    description: "Japanese anime tv shows and movies"
  - name: Other
    slug: other
    description: "Fallback category for low-confidence or uncategorized notes."

# -----------------------------
# Organization Settings
# -----------------------------
# If true, create sub-folders according to folder_structure
organize_by_folder: true

# One of: tags | date | custom | flat
folder_structure: tags

# Create index files (Maps of Content) in folders when applicable
create_index_files: false

# Map category/tag slugs to specific folders (overrides defaults)
custom_folder_rules:
  recipes: cooking
  gaming: games
  music: music

# -----------------------------
# Tagging Settings
# -----------------------------
# Regular-expression-based rules mapping to tags to inject.
# custom_tag_rules is used by TagInjector in the current implementation.
# custom_tag_rules:
#   "cocktail|drink|recipe": ["recipes", "drinks"]
#   "gaming|game|play": ["gaming"]
#   "music|song|album": ["music"]

# Optionally supply auto_tag_rules; these are available for future/alternate tag processors.
auto_tag_rules: {}

# Restrict or exclude tags after processing
tag_whitelist: null      # e.g., ["recipes", "gaming", "music"]
tag_blacklist: []        # e.g., ["tmp", "wip"]

# -----------------------------
# Content Processing
# -----------------------------
clean_whitespace: true
standardize_headers: true
fix_list_formatting: true

# Custom transformation rules (processor-specific semantics)
custom_transformations: {}

# -----------------------------
# Output Settings
# -----------------------------
# Format options: obsidian | standard
output_format: obsidian

# Preserve the original SimpleNote directory layout instead of reorganizing
preserve_original_structure: false

# Generate backlinks where supported
create_backlinks: false

# -----------------------------
# Note Splitting (Phase 3)
# -----------------------------
# When enabled, large notes can be split into multiple files based on headers/patterns.
split_header_level: 2          # Split on '##' headers by default
preserve_main_header: true     # Keep original file with first section

# Only split notes whose content matches at least one of these regex patterns (empty = all)
split_notes_patterns: []

# Only split notes that already contain these tags (empty = disabled)
split_enabled_tags:
  - cocktails
  - recipes
  - drinks
